/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.View.classes;

import com.DB.ClassesDB;
import com.Objects.Classes;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diego
 */
public class ClassesManagement extends javax.swing.JInternalFrame {

    /**
     * Creates new form ClassesAdd
     */
    public ClassesManagement() {
        initComponents();
        listClasses();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textClassName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textCapacity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textDuration = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textDescription = new javax.swing.JTextArea();
        btnRegister = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClasses = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        textCode = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("New Classes");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Class Name *");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        textClassName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textClassNameActionPerformed(evt);
            }
        });
        getContentPane().add(textClassName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 360, -1));

        jLabel2.setText("Capacity");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, -1, -1));
        getContentPane().add(textCapacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 130, -1));

        jLabel3.setText("Duration");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 50, -1, -1));
        getContentPane().add(textDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, 100, -1));

        jLabel4.setText("Description");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 101, -1, -1));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        getContentPane().add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 240, 100, 40));

        textDescription.setColumns(20);
        textDescription.setRows(5);
        jScrollPane1.setViewportView(textDescription);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 650, 100));

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, 100, 40));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 100, 40));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, 100, 40));

        btnLoad.setText("Load Informations");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoad, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 530, 210, -1));

        tableClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Class Name", "Capacity", "Duration", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableClasses);
        if (tableClasses.getColumnModel().getColumnCount() > 0) {
            tableClasses.getColumnModel().getColumn(0).setPreferredWidth(10);
            tableClasses.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableClasses.getColumnModel().getColumn(2).setPreferredWidth(20);
            tableClasses.getColumnModel().getColumn(3).setPreferredWidth(20);
            tableClasses.getColumnModel().getColumn(4).setPreferredWidth(300);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 650, 200));

        jLabel5.setText("Code");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        textCode.setEnabled(false);
        getContentPane().add(textCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 80, -1));

        setBounds(0, 0, 736, 623);
    }// </editor-fold>//GEN-END:initComponents

    private void textClassNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textClassNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textClassNameActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        if(textClassName.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Name is mandatory.");
        }else{addClasses(); cleanFields(); listClasses();}
        
      
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateClasses();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteClasses();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        cleanFields();
        listClasses();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        loadField();
    }//GEN-LAST:event_btnLoadActionPerformed

    private void addClasses(){
        try{
            
            String className = textClassName.getText();
            String description = textDescription.getText();
            String capacity = textCapacity.getText();
            String duration = textDuration.getText();
            
            Classes classes = new Classes();
            classes.setName(className);
            classes.setDescription(description);
            classes.setMaxCapacity(capacity);
            classes.setAvgDuration(duration);
            
            ClassesDB objClassesDB = new ClassesDB();          
            
            boolean checkProcess = objClassesDB.addClasses(classes);
            
            if(checkProcess == true){
                JOptionPane.showMessageDialog(null, "Class included.");
                cleanFields();
                listClasses();
            }else{JOptionPane.showMessageDialog(null, "Class not included.");}
            
        }catch(Exception error){
            JOptionPane.showMessageDialog(null, "View Add Classes" + error.getMessage());
        }
    }
    
    private void updateClasses(){
        try{
            Classes classes = new Classes();
            int classesCode = Integer.parseInt(textCode.getText());
            String className = textClassName.getText();
            String description = textDescription.getText();
            String capacity = textCapacity.getText();
            String duration = textDuration.getText();
            
            
            classes.setClassesID(classesCode);
            classes.setName(className);
            classes.setDescription(description);
            classes.setMaxCapacity(capacity);
            classes.setAvgDuration(duration);
            
            ClassesDB objClassesDB = new ClassesDB();
            objClassesDB.updateClasses(classes);
            
        }catch(Exception error){
            JOptionPane.showMessageDialog(null, "View Classes.updateClasses" + error.getMessage());
        }
    }
    
    private void deleteClasses() {
        try {
            int classCode = Integer.parseInt(textCode.getText());

            Classes classes = new Classes();

            classes.setClassesID(classCode);

            ClassesDB classesDB = new ClassesDB();
            boolean checkAdding = classesDB.deleteClasses(classes);

            if (checkAdding == true) {
                JOptionPane.showMessageDialog(null, "Class Deleted");
                listClasses();
                cleanFields();

            }

        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, "Button AddMember" + error.getMessage());
        }
    }
    
    private void listClasses(){
        try{
            ClassesDB objClassesDB = new ClassesDB();
            DefaultTableModel tableModel = (DefaultTableModel) tableClasses.getModel();
            ArrayList<Classes> classesList = objClassesDB.searchClasses();
            tableModel.setNumRows(0);
            
            for(int row = 0; row < classesList.size(); row++){
                tableModel.addRow(new Object[]{
                    classesList.get(row).getClassesID(),
                    classesList.get(row).getName(),
                    classesList.get(row).getMaxCapacity(),
                    classesList.get(row).getAvgDuration(),
                    classesList.get(row).getDescription(),});
                    
                }
            
        }catch(Exception error){
            JOptionPane.showMessageDialog(null, "View Classes.listClasses()" + error.getMessage());
        }
    }
    
    private void loadField(){
        int row = tableClasses.getSelectedRow();
        textCode.setText(tableClasses.getModel().getValueAt(row, 0).toString());
        textClassName.setText(tableClasses.getModel().getValueAt(row, 1).toString());
        textCapacity.setText(tableClasses.getModel().getValueAt(row, 2).toString());
        textDuration.setText(tableClasses.getModel().getValueAt(row, 3).toString());
        textDescription.setText(tableClasses.getModel().getValueAt(row, 4).toString());
                
    }
    
    private void cleanFields(){
        
        textCode.setText(null);
        textClassName.setText(null);
        textCapacity.setText(null);
        textDuration.setText(null);
        textDescription.setText(null);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableClasses;
    private javax.swing.JTextField textCapacity;
    private javax.swing.JTextField textClassName;
    private javax.swing.JTextField textCode;
    private javax.swing.JTextArea textDescription;
    private javax.swing.JTextField textDuration;
    // End of variables declaration//GEN-END:variables
}
